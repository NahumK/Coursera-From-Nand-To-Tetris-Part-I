// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	
	Mux(a = false, b = instruction[4], sel = instruction[15], out = loadD);
	DRegister(in = aluOut, load = loadD, out = DOutput);
	
	Mux16(a = instruction, b = aluOut, sel = instruction[15], out = AInput);
	
	Mux(a = true, b = instruction[5], sel = instruction[15], out = loadA);
	ARegister(in = AInput, load = loadA, out = AOutput, out[0..14] = addressM); 
	
	Mux(a = false, b = instruction[12], sel = instruction[15], out = loadAorM);
	Mux16(a = AOutput, b = inM, sel = loadAorM, out = AorM); 
	
	ALU(x = DOutput, y = AorM, zx = instruction[11], nx = instruction[10], zy = instruction[9], ny = instruction[8], f = instruction[7], no = instruction[6], out = aluOut, out = outM, zr = zr, ng = ng);
	
	Mux(a = false, b = instruction[3], sel = instruction[15], out = writeM);

	//Programm Counter Logic
	
	 Not(in = ng, out = notNg);
	 Not(in = zr, out = notZr);
	 
	 And(a = instruction[0], b = notZr, out = tmp1);
	 And(a = notZr, b = ng, out = tmp2);
	 And(a = notNg, b = tmp1, out = JGT);
	 And(a = instruction[2], b = tmp1, out = JNE);
	 And(a = instruction[1], b = zr, out = JEQ);
	 And(a = instruction[2], b = tmp2, out = JLT);
	 
	 Or(a = JNE, b = JGT, out = loadTmp1);
	 Or(a = loadTmp1, b = JEQ, out = loadTmp2);
	 Or(a = loadTmp2, b = JLT, out = loadPCTmp);
	
	 And(a = instruction[15], b = loadPCTmp, out = loadPC);
	 
	 PC(in = AOutput, load = loadPC, inc = true, reset = reset, out[0..14] = pc);
 
}